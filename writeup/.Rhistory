syllable_status = case_when(
substr(Segment, 2, 3) == "11" ~ "plain",
substr(Segment, 2, 3) == "22" ~ "emphatic",
substr(Segment, 2, 3) == "13" ~ "plain",
substr(Segment, 2, 3) == "33" ~ "mixed",
TRUE ~ NA_character_ # Default case
),
morph = case_when(
endsWith(Segment, "r") ~ "root",
endsWith(Segment, "s") ~ "suffix",
endsWith(Segment, "p") ~ "prefix",
TRUE ~ NA_character_ # Default case
)
) %>%
# Replace NaN values with "mixed"
mutate(
word_status = ifelse(is.na(word_status), "mixed", word_status),
syllable_status = ifelse(is.na(syllable_status), "mixed", syllable_status),
morph = ifelse(is.na(morph), "mixed", morph)
)
# Save the modified DataFrame to a new CSV file
write.csv(results_df, "/Users/ritalavi/Desktop/Urmi_fieldwork/speaker_1/morphologically_complex_words/edited_results.csv", row.names = FALSE)
# View the modified DataFrame (optional)
print(results_df)
# Load necessary packages
library(dplyr)
library(readr)
# Read the CSV file
results_df <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/speaker_1/morphologically_complex_words/results.csv")
# Remove the Filename column and create new columns based on the conditions
results_df <- results_df %>%
select(-Filename) %>% # Remove the Filename column
mutate(
word_status = case_when(
substr(Segment, 2, 3) == "11" ~ "plain",
substr(Segment, 2, 3) == "22" ~ "emphatic",
substr(Segment, 2, 3) == "13" ~ "mixed",
substr(Segment, 2, 3) == "33" ~ "mixed",
TRUE ~ NA_character_ # Default case
),
syllable_status = case_when(
substr(Segment, 2, 3) == "11" ~ "plain",
substr(Segment, 2, 3) == "22" ~ "emphatic",
substr(Segment, 2, 3) == "13" ~ "plain",
substr(Segment, 2, 3) == "33" ~ "mixed",
TRUE ~ NA_character_ # Default case
),
morph = case_when(
endsWith(Segment, "r") ~ "root",
endsWith(Segment, "s") ~ "suffix",
endsWith(Segment, "p") ~ "prefix",
TRUE ~ NA_character_ # Default case
)
) %>%
# Replace NaN values with "mixed"
mutate(
word_status = ifelse(is.na(word_status), "mixed", word_status),
syllable_status = ifelse(is.na(syllable_status), "mixed", syllable_status),
morph = ifelse(is.na(morph), "mixed", morph)
) %>%
# Replace specified vowels in the Segment column
mutate(Segment = gsub("e", "ɛ", Segment),
Segment = gsub("ej", "ɛj", Segment),
Segment = gsub("o", "ø", Segment))
# Save the modified DataFrame to a new CSV file
write.csv(results_df, "/Users/ritalavi/Desktop/Urmi_fieldwork/speaker_1/morphologically_complex_words/edited_results.csv", row.names = FALSE)
# View the modified DataFrame (optional)
print(results_df)
# Create a vowel plot of F1 vs. F2 colored by morph
ggplot(results_df, aes(x = F2, y = F1, color = morph)) +
geom_point() +
labs(title = "Vowel Plot",
x = "F2",
y = "F1") +
theme_minimal()
library(tidyverse)
# Create a vowel plot of F1 vs. F2 colored by morph
ggplot(results_df, aes(x = F2, y = F1, color = morph)) +
geom_point() +
labs(title = "Vowel Plot",
x = "F2",
y = "F1") +
theme_minimal()
# Create a vowel plot of F1 vs. F2 colored by morph
vowel_means <- results_df %>%
group_by(Segment) %>%
summarise(mean_F1 = mean(F1),
mean_F2 = mean(F2))
# Load necessary packages
library(dplyr)
library(readr)
library(tidyverse)
# Read the CSV file
results_df <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/speaker_1/morphologically_complex_words/results.csv")
# Remove the Filename column and create new columns based on the conditions
results_df <- results_df %>%
select(-Filename) %>% # Remove the Filename column
mutate(
word_status = case_when(
substr(Segment, 2, 3) == "11" ~ "plain",
substr(Segment, 2, 3) == "22" ~ "emphatic",
substr(Segment, 2, 3) == "13" ~ "mixed",
substr(Segment, 2, 3) == "33" ~ "mixed",
TRUE ~ NA_character_ # Default case
),
syllable_status = case_when(
substr(Segment, 2, 3) == "11" ~ "plain",
substr(Segment, 2, 3) == "22" ~ "emphatic",
substr(Segment, 2, 3) == "13" ~ "plain",
substr(Segment, 2, 3) == "33" ~ "mixed",
TRUE ~ NA_character_ # Default case
),
morph = case_when(
endsWith(Segment, "r") ~ "root",
endsWith(Segment, "s") ~ "suffix",
endsWith(Segment, "p") ~ "prefix",
TRUE ~ NA_character_ # Default case
)
) %>%
# Replace NaN values with "mixed"
mutate(
word_status = ifelse(is.na(word_status), "mixed", word_status),
syllable_status = ifelse(is.na(syllable_status), "mixed", syllable_status),
morph = ifelse(is.na(morph), "mixed", morph)
) %>%
# Replace specified vowels in the Segment column
mutate(Segment = gsub("e", "ɛ", Segment),
Segment = gsub("ej", "ɛj", Segment),
Segment = gsub("o", "ø", Segment),
Segment = gsub("u", "ʉ", Segment))
# Save the modified DataFrame to a new CSV file
write.csv(results_df, "/Users/ritalavi/Desktop/Urmi_fieldwork/speaker_1/morphologically_complex_words/edited_results.csv", row.names = FALSE)
# View the modified DataFrame (optional)
print(results_df)
view(results_df)
# Create a vowel plot of F1 vs. F2 colored by morph
vowel_means <- results_df %>%
group_by(Segment) %>%
summarise(mean_F1 = mean(F1),
mean_F2 = mean(F2))
vowel_means
#vowel chart
ggplot(results_df, aes(x = F2, y = F1, color = Morph, label = Segment)) +
geom_label(data = vowel_means, aes(x = mean_F2, y = mean_F1)) +
scale_x_reverse() + scale_y_reverse() +
scale_color_discrete(breaks = c("a", "æ", "e", "i", "ʉ", "ø")) +
theme_classic() +
theme(legend.position = "none") +
xlab("Mean F2 (Hz)") +
ylab("Mean F1 (Hz)")
results_df
#vowel chart
ggplot(results_df, aes(x = F2, y = F1, color = morph, label = Segment)) +
geom_label(data = vowel_means, aes(x = mean_F2, y = mean_F1)) +
scale_x_reverse() + scale_y_reverse() +
scale_color_discrete(breaks = c("a", "æ", "e", "i", "ʉ", "ø")) +
theme_classic() +
theme(legend.position = "none") +
xlab("Mean F2 (Hz)") +
ylab("Mean F1 (Hz)")
results_df
# Create a vowel plot of F1 vs. F2 colored by morph
vowel_means <- results_df %>%
group_by(Segment, morph) %>%
summarise(mean_F1 = mean(F1),
mean_F2 = mean(F2))
vowel_means
#vowel chart
ggplot(results_df, aes(x = F2, y = F1, color = morph, label = Segment)) +
geom_label(data = vowel_means, aes(x = mean_F2, y = mean_F1)) +
scale_x_reverse() + scale_y_reverse() +
scale_color_discrete(breaks = c("a", "æ", "e", "i", "ʉ", "ø")) +
theme_classic() +
theme(legend.position = "none") +
xlab("Mean F2 (Hz)") +
ylab("Mean F1 (Hz)")
# Filter out "ɛj" from vowel_means for plotting
vowel_means_filtered <- vowel_means %>%
filter(Segment != "ɛj")
# Vowel chart: separate plots for each vowel
ggplot(vowel_means_filtered, aes(x = mean_F2, y = mean_F1, color = morph, label = Segment)) +
geom_label() +
scale_x_reverse() +
scale_y_reverse() +
scale_color_discrete(breaks = c("a", "æ", "ɛ", "i", "ʉ", "ø")) +
theme_classic() +
theme(legend.position = "none") +
xlab("Mean F2 (Hz)") +
ylab("Mean F1 (Hz)") +
facet_wrap(~ Segment, scales = "free") # Create separate plots for each Segment
vowel_means_filtered
# Filter out "ɛj" from vowel_means for plotting
vowel_means_filtered <- results_df %>%
filter(Segment != "ɛj")
# Vowel chart: separate plots for each vowel
ggplot(vowel_means_filtered, aes(x = mean_F2, y = mean_F1, color = morph, label = Segment)) +
geom_label() +
scale_x_reverse() +
scale_y_reverse() +
scale_color_discrete(breaks = c("a", "æ", "ɛ", "i", "ʉ", "ø")) +
theme_classic() +
theme(legend.position = "none") +
xlab("Mean F2 (Hz)") +
ylab("Mean F1 (Hz)") +
facet_wrap(~ Segment, scales = "free") # Create separate plots for each Segment
filter(Segment != "ɛj")
results_df
vowel_means_filtered <- results_df %>%
group_by(Segment, morph) %>%
summarise(mean_F1 = mean(F1, na.rm = TRUE),
mean_F2 = mean(F2, na.rm = TRUE))
filter(Segment != "ɛj")
# Load necessary packages
library(dplyr)
library(readr)
library(tidyverse)
# Read the CSV file
results_df <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/speaker_1/morphologically_complex_words/results.csv")
# Remove the Filename column and create new columns based on the conditions
results_df <- results_df %>%
select(-Filename) %>% # Remove the Filename column
mutate(
word_status = case_when(
substr(Segment, 2, 3) == "11" ~ "plain",
substr(Segment, 2, 3) == "22" ~ "emphatic",
substr(Segment, 2, 3) == "13" ~ "mixed",
substr(Segment, 2, 3) == "33" ~ "mixed",
TRUE ~ NA_character_ # Default case
),
syllable_status = case_when(
substr(Segment, 2, 3) == "11" ~ "plain",
substr(Segment, 2, 3) == "22" ~ "emphatic",
substr(Segment, 2, 3) == "13" ~ "plain",
substr(Segment, 2, 3) == "33" ~ "mixed",
TRUE ~ NA_character_ # Default case
),
morph = case_when(
endsWith(Segment, "r") ~ "root",
endsWith(Segment, "s") ~ "suffix",
endsWith(Segment, "p") ~ "prefix",
TRUE ~ NA_character_ # Default case
)
) %>%
# Replace NaN values with "mixed"
mutate(
word_status = ifelse(is.na(word_status), "mixed", word_status),
syllable_status = ifelse(is.na(syllable_status), "mixed", syllable_status),
morph = ifelse(is.na(morph), "mixed", morph)
) %>%
# Replace specified vowels in the Segment column
mutate(Segment = gsub("e", "ɛ", Segment),
Segment = gsub("ej", "ɛj", Segment),
Segment = gsub("o", "ø", Segment),
Segment = gsub("u", "ʉ", Segment))
print(results_df)
vowel_means <- results_df %>%
group_by(Segment, morph) %>%
summarise(mean_F1 = mean(F1, na.rm = TRUE),
mean_F2 = mean(F2, na.rm = TRUE))
vowel_means_filtered <- results_df %>%
group_by(Segment, morph) %>%
summarise(mean_F1 = mean(F1, na.rm = TRUE),
mean_F2 = mean(F2, na.rm = TRUE)) %>%
filter(Segment != "ɛj")
ggplot(vowel_means_filtered, aes(x = mean_F2, y = mean_F1, color = morph, label = Segment)) +
geom_label() +
scale_x_reverse() +
scale_y_reverse() +
scale_color_discrete(breaks = c("a", "æ", "ɛ", "i", "ʉ", "ø")) +
theme_classic() +
theme(legend.position = "none") +
xlab("Mean F2 (Hz)") +
ylab("Mean F1 (Hz)") +
facet_wrap(~ Segment, scales = "free") # Create separate plots for each Segment
#vowel chart
ggplot(results_df, aes(x = F2, y = F1, color = morph, label = Segment)) +
geom_label(data = vowel_means, aes(x = mean_F2, y = mean_F1)) +
scale_x_reverse() + scale_y_reverse() +
scale_color_discrete(breaks = c("a", "æ", "ɛ", "i", "ʉ", "ø")) +
theme_classic() +
theme(legend.position = "none") +
xlab("Mean F2 (Hz)") +
ylab("Mean F1 (Hz)")
results_df
# Add a new column "vowel" based on the first segment of each string in "Segment"
results_df <- results_df %>%
mutate(
vowel = str_extract(Segment, "^[^_]*")  # Extracts everything before the first underscore
)
results_df
# Load necessary packages
library(dplyr)
library(readr)
library(tidyverse)
# Read the CSV file
results_df <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/speaker_1/morphologically_complex_words/results.csv")
# Remove the Filename column and create new columns based on the conditions
results_df <- results_df %>%
select(-Filename) %>% # Remove the Filename column
mutate(
word_status = case_when(
substr(Segment, 2, 3) == "11" ~ "plain",
substr(Segment, 2, 3) == "22" ~ "emphatic",
substr(Segment, 2, 3) == "13" ~ "mixed",
substr(Segment, 2, 3) == "33" ~ "mixed",
TRUE ~ NA_character_ # Default case
),
syllable_status = case_when(
substr(Segment, 2, 3) == "11" ~ "plain",
substr(Segment, 2, 3) == "22" ~ "emphatic",
substr(Segment, 2, 3) == "13" ~ "plain",
substr(Segment, 2, 3) == "33" ~ "mixed",
TRUE ~ NA_character_ # Default case
),
morph = case_when(
endsWith(Segment, "r") ~ "root",
endsWith(Segment, "s") ~ "suffix",
endsWith(Segment, "p") ~ "prefix",
TRUE ~ NA_character_ # Default case
)
) %>%
# Replace NaN values with "mixed"
mutate(
word_status = ifelse(is.na(word_status), "mixed", word_status),
syllable_status = ifelse(is.na(syllable_status), "mixed", syllable_status),
morph = ifelse(is.na(morph), "mixed", morph)
) %>%
# Replace specified vowels in the Segment column
mutate(Segment = gsub("e", "ɛ", Segment),
Segment = gsub("ej", "ɛj", Segment),
Segment = gsub("o", "ø", Segment),
Segment = gsub("u", "ʉ", Segment))
# Add a new column "vowel" based on the first segment of each string in "Segment"
# Add a new column "vowel" based on the first segment of each string in "Segment"
results_df <- results_df %>%
mutate(
vowel = str_split(Segment, " ")[[1]][1]  # Adjust the delimiter as needed
)
results_df
# Load necessary packages
library(dplyr)
library(readr)
library(tidyverse)
# Read the CSV file
results_df <- read_csv("/Users/ritalavi/Desktop/Urmi_fieldwork/speaker_1/morphologically_complex_words/results.csv")
# Remove the Filename column and create new columns based on the conditions
results_df <- results_df %>%
select(-Filename) %>% # Remove the Filename column
mutate(
word_status = case_when(
substr(Segment, 2, 3) == "11" ~ "plain",
substr(Segment, 2, 3) == "22" ~ "emphatic",
substr(Segment, 2, 3) == "13" ~ "mixed",
substr(Segment, 2, 3) == "33" ~ "mixed",
TRUE ~ NA_character_ # Default case
),
syllable_status = case_when(
substr(Segment, 2, 3) == "11" ~ "plain",
substr(Segment, 2, 3) == "22" ~ "emphatic",
substr(Segment, 2, 3) == "13" ~ "plain",
substr(Segment, 2, 3) == "33" ~ "mixed",
TRUE ~ NA_character_ # Default case
),
morph = case_when(
endsWith(Segment, "r") ~ "root",
endsWith(Segment, "s") ~ "suffix",
endsWith(Segment, "p") ~ "prefix",
TRUE ~ NA_character_ # Default case
)
) %>%
# Replace NaN values with "mixed"
mutate(
word_status = ifelse(is.na(word_status), "mixed", word_status),
syllable_status = ifelse(is.na(syllable_status), "mixed", syllable_status),
morph = ifelse(is.na(morph), "mixed", morph)
) %>%
# Replace specified vowels in the Segment column
mutate(Segment = gsub("e", "ɛ", Segment),
Segment = gsub("ej", "ɛj", Segment),
Segment = gsub("o", "ø", Segment),
Segment = gsub("u", "ʉ", Segment))
# Add a new column "vowel" based on the first character of each string in "Segment"
results_df <- results_df %>%
mutate(
vowel = str_sub(Segment, 1, 1)  # Extracts just the first character
)
results_df
vowel_means <- results_df %>%
group_by(vowel, morph) %>%  # Group by the new vowel column
summarise(mean_F1 = mean(F1, na.rm = TRUE),
mean_F2 = mean(F2, na.rm = TRUE),
.groups = 'drop')  # Add .groups = 'drop' to avoid grouping issues later
# Vowel chart: separate plots for each vowel
ggplot(results_df, aes(x = F2, y = F1, color = morph, label = Segment)) +
geom_label(data = vowel_means, aes(x = mean_F2, y = mean_F1)) +
scale_x_reverse() +
scale_y_reverse() +
scale_color_discrete(breaks = c("a", "æ", "ɛ", "i", "ʉ", "ø")) +
theme_classic() +
theme(legend.position = "none") +
xlab("Mean F2 (Hz)") +
ylab("Mean F1 (Hz)") +
facet_wrap(~ vowel, scales = "free")  # Create separate plots for each vowel
vowel_means <- results_df %>%
group_by(vowel, morph) %>%  # Group by the new vowel column
summarise(mean_F1 = mean(F1, na.rm = TRUE),
mean_F2 = mean(F2, na.rm = TRUE),
.groups = 'drop')  # Add .groups = 'drop' to avoid grouping issues later
# Vowel chart: separate plots for each vowel
ggplot(results_df, aes(x = F2, y = F1, color = morph, label = vowel)) +
geom_label(data = vowel_means, aes(x = mean_F2, y = mean_F1)) +
scale_x_reverse() +
scale_y_reverse() +
scale_color_discrete(breaks = c("a", "æ", "ɛ", "i", "ʉ", "ø")) +
theme_classic() +
theme(legend.position = "none") +
xlab("Mean F2 (Hz)") +
ylab("Mean F1 (Hz)") +
facet_wrap(~ vowel, scales = "free")  # Create separate plots for each vowel
vowel_means <- results_df %>%
group_by(vowel, morph) %>%  # Group by the new vowel column
summarise(mean_F1 = mean(F1, na.rm = TRUE),
mean_F2 = mean(F2, na.rm = TRUE),
.groups = 'drop')  # Add .groups = 'drop' to avoid grouping issues later
# Vowel chart: separate plots for each vowel
ggplot(results_df, aes(x = F2, y = F1, color = morph, label = Segment)) +
geom_label(data = vowel_means, aes(x = mean_F2, y = mean_F1), show.legend = FALSE) +
scale_x_reverse() +
scale_y_reverse() +
scale_color_discrete(name = "Morph", breaks = c("a", "æ", "ɛ", "i", "ʉ", "ø")) +  # Set the legend title
theme_classic() +
theme(legend.position = "right") +  # Position the legend to the right
xlab("Mean F2 (Hz)") +
ylab("Mean F1 (Hz)") +
facet_wrap(~ vowel, scales = "free")  # Create separate plots for each vowel
vowel_means <- results_df %>%
group_by(vowel, morph) %>%  # Group by the new vowel column
summarise(mean_F1 = mean(F1, na.rm = TRUE),
mean_F2 = mean(F2, na.rm = TRUE),
.groups = 'drop')  # Add .groups = 'drop' to avoid grouping issues later
# Vowel chart: separate plots for each vowel
ggplot(results_df, aes(x = F2, y = F1, color = morph, label = vowel)) +
geom_label(data = vowel_means, aes(x = mean_F2, y = mean_F1)) +
scale_x_reverse() +
scale_y_reverse() +
scale_color_discrete(breaks = c("a", "æ", "ɛ", "i", "ʉ", "ø")) +
theme_classic() +
theme(legend.position = "none") +
xlab("Mean F2 (Hz)") +
ylab("Mean F1 (Hz)") +
facet_wrap(~ vowel, scales = "free")  # Create separate plots for each vowel
# Calculate mean F1 and F2 for each vowel and morph
vowel_means <- results_df %>%
group_by(vowel, morph) %>%  # Group by the new vowel column
summarise(mean_F1 = mean(F1, na.rm = TRUE),
mean_F2 = mean(F2, na.rm = TRUE),
.groups = 'drop')  # Add .groups = 'drop' to avoid grouping issues later
# Vowel chart: separate plots for each vowel
ggplot(results_df, aes(x = F2, y = F1, color = morph, label = vowel)) +
geom_label(data = vowel_means, aes(x = mean_F2, y = mean_F1), show.legend = FALSE) +
scale_x_reverse() +
scale_y_reverse() +
scale_color_discrete(name = "Morph", breaks = c("a", "æ", "ɛ", "i", "ʉ", "ø")) +  # Set the legend title
theme_classic() +
theme(legend.position = "right") +  # Position the legend to the right
xlab("Mean F2 (Hz)") +
ylab("Mean F1 (Hz)") +
facet_wrap(~ vowel, scales = "free")  # Create separate plots for each vowel
# Save the plot
ggsave("vowel_plot.png", width = 10, height = 6)  # Adjust width and height as needed
results_df
view(results_df)
vowel_means
# Calculate mean F1 and F2 for each Segment and morph
vowel_means <- results_df %>%
group_by(vowel, morph, word_status, syllable_status) %>%  # Group by the new vowel column
summarise(mean_F1 = mean(F1, na.rm = TRUE),
mean_F2 = mean(F2, na.rm = TRUE),
.groups = 'drop')  # Add .groups = 'drop' to avoid grouping issues later
vowel_means
view(vowel_means)
ggplot(results_df, aes(x = F2, y = F1, color = morph, label = vowel)) +
geom_label(data = vowel_means, aes(x = mean_F2, y = mean_F1), show.legend = FALSE) +
scale_x_reverse() +
scale_y_reverse() +
scale_color_discrete(name = "Morph", breaks = c("a", "æ", "ɛ", "i", "ʉ", "ø")) +  # Set the legend title
theme_classic() +
theme(legend.position = "right") +  # Position the legend to the right
xlab("Mean F2 (Hz)") +
ylab("Mean F1 (Hz)") +
facet_wrap(~ vowel, scales = "free")  # Create separate plots for each vowel
vowel_means
results_df
vowel_means <- results_df %>%
group_by(vowel, morph, syllable_status) %>%  # Group by the new vowel column
summarise(mean_F1 = mean(F1, na.rm = TRUE),
mean_F2 = mean(F2, na.rm = TRUE),
.groups = 'drop')  # Add .groups = 'drop' to avoid grouping issues later
# Vowel chart: separate plots for each vowel
ggplot(results_df, aes(x = F2, y = F1, color = morph, label = vowel)) +
geom_label(data = vowel_means, aes(x = mean_F2, y = mean_F1), show.legend = FALSE) +
scale_x_reverse() +
scale_y_reverse() +
scale_color_discrete(name = "Morph", breaks = c("a", "æ", "ɛ", "i", "ʉ", "ø")) +  # Set the legend title
theme_classic() +
theme(legend.position = "right") +  # Position the legend to the right
xlab("Mean F2 (Hz)") +
ylab("Mean F1 (Hz)") +
facet_wrap(~ vowel, scales = "free")  # Create separate plots for each vowel
vowel_means
quarto render your_document.qmd
quarto render your_document.qmd
